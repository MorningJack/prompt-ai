---
description:
globs:
alwaysApply: false
---
# MCP 服务集成规范

## MCP (Model Context Protocol) 集成

### MCP 服务架构
基于 MCP 协议实现提示词的标准化访问和管理，支持多种 AI 客户端集成。

### 核心功能
1. **个人提示词访问** - 用户私有提示词的 MCP 服务
2. **平台精选提示词** - 官方精选提示词的公共访问
3. **实时同步** - 提示词更新的实时推送
4. **权限控制** - 基于用户权限的访问控制

### MCP 服务端点
```typescript
// 个人提示词服务
interface PersonalPromptMCP {
  listPrompts(): Promise<Prompt[]>
  getPrompt(id: string): Promise<Prompt>
  createPrompt(data: PromptCreate): Promise<Prompt>
  updatePrompt(id: string, data: PromptUpdate): Promise<Prompt>
  deletePrompt(id: string): Promise<void>
}

// 平台精选服务
interface FeaturedPromptMCP {
  listFeatured(): Promise<Prompt[]>
  getByCategory(category: string): Promise<Prompt[]>
  search(query: string): Promise<Prompt[]>
  getPopular(): Promise<Prompt[]>
}
```

### 目录结构
```
mcp-service/
├── src/
│   ├── handlers/      # MCP 处理器
│   ├── models/        # 数据模型
│   ├── services/      # 业务逻辑
│   ├── utils/         # 工具函数
│   └── server.ts      # MCP 服务器
├── config/
│   └── mcp.json      # MCP 配置
└── package.json
```

### 集成 Sequential Thinking
- 使用 `sequentialthinking` 工具进行复杂提示词的分析和优化
- 提供提示词效果评估和改进建议
- 支持多轮对话式的提示词调试

### 安全与认证
- JWT Token 认证
- API 密钥管理
- 访问频率限制
- 数据加密传输

### 监控与日志
- 服务调用统计
- 错误追踪和报警
- 性能监控指标
- 用户行为分析

### 部署配置
- Docker 容器化部署
- 支持负载均衡
- 数据库连接池
- Redis 缓存集成
