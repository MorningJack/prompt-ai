---
description:
globs:
alwaysApply: false
---
# 开发工作流程

## 项目开发指导原则

### 开发优先级
1. **用户体验优先** - 所有功能设计以用户需求为出发点
2. **简单可控** - 选择最简单有效的技术方案
3. **模块化设计** - 公共功能组件化，便于复用和维护
4. **质量保证** - 完善的测试覆盖和错误处理

### 功能开发顺序

#### 第一阶段：核心基础功能
1. **用户认证系统** - 注册、登录、用户管理
2. **提示词 CRUD** - 创建、编辑、删除、查看提示词
3. **基础分类系统** - 简单的分类管理
4. **基础 UI 框架** - 参考 21st.dev 设计风格

#### 第二阶段：社区功能
1. **评分评论系统** - 用户反馈机制
2. **搜索筛选功能** - 智能搜索和多维筛选
3. **精选推荐机制** - 官方精选和算法推荐
4. **用户个人中心** - 个人提示词管理

#### 第三阶段：高级功能
1. **MCP 服务集成** - 标准化 API 接口
2. **Sequential Thinking 集成** - AI 辅助优化
3. **多模型支持** - 扩展更多 AI 模型
4. **高级分析功能** - 使用统计和效果分析

### 技术实现要点

#### 前端开发 [frontend-guidelines.mdc](mdc:frontend-guidelines.mdc)
- Vue 3 + TypeScript + Tailwind CSS
- Magic UI 组件库集成
- 响应式设计和移动端适配
- 状态管理和路由配置

#### 后端开发 [backend-guidelines.mdc](mdc:backend-guidelines.mdc)
- FastAPI + SQLAlchemy + PostgreSQL
- RESTful API 设计
- JWT 认证和权限控制
- 数据库设计和迁移

#### 数据模型 [data-models.mdc](mdc:data-models.mdc)
- 用户、提示词、分类、评分等核心模型
- 关系设计和索引优化
- 数据验证和约束

#### MCP 集成 [mcp-integration.mdc](mdc:mcp-integration.mdc)
- MCP 协议实现
- 个人和平台提示词服务
- Sequential Thinking 工具集成

### 代码质量标准

#### 代码规范
- 使用 TypeScript 进行类型约束
- 遵循 ESLint 和 Prettier 格式化规则
- 变量和函数命名清晰易懂
- 适当的代码注释和文档

#### 测试要求
- 单元测试覆盖率 > 80%
- 集成测试覆盖核心业务流程
- E2E 测试覆盖关键用户场景
- 性能测试和压力测试

#### 错误处理
- 全局错误捕获和处理
- 用户友好的错误提示
- 详细的错误日志记录
- 优雅的降级策略

### 部署和运维

#### 环境配置
- 开发、测试、生产环境分离
- 环境变量管理
- Docker 容器化部署
- CI/CD 自动化流程

#### 监控和维护
- 应用性能监控
- 错误追踪和报警
- 数据备份和恢复
- 安全漏洞扫描

### 项目管理

#### 版本控制
- Git Flow 工作流
- 功能分支开发
- Pull Request 代码审查
- 版本标签管理

#### 文档维护
- README.md 项目说明 [README.md](mdc:README.md)
- API 文档自动生成
- 开发规范文档更新
- 用户使用手册

### 持续改进

#### 用户反馈
- 用户行为数据分析
- 功能使用统计
- 用户满意度调研
- 需求收集和优先级排序

#### 技术优化
- 性能优化和调优
- 代码重构和架构升级
- 新技术调研和应用
- 安全策略更新

## 开发检查清单

### 功能开发完成后检查
- [ ] 功能符合需求规格说明
- [ ] 代码通过所有测试用例
- [ ] UI/UX 符合设计规范
- [ ] 性能指标达到要求
- [ ] 错误处理完整
- [ ] 文档更新完成
- [ ] 代码审查通过

### 发布前检查
- [ ] 所有测试通过
- [ ] 数据库迁移脚本准备
- [ ] 环境配置检查
- [ ] 回滚方案准备
- [ ] 监控告警配置
- [ ] 用户通知准备

这个工作流程将确保项目按照高质量标准有序推进，实现用户需求。
